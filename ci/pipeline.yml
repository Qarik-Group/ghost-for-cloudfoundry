---
meta:
  name:     (( param "Please name your pipeline" ))
  team:     (( param "Please provide expected concourse team to deploy test pipelines" ))
  pipeline: (( grab meta.name ))
  target:   (( param "Please identify the name of the target Concourse CI" ))
  url:      (( param "Please specify the full url of the target Concourse CI" ))

  image:
    name: starkandwayne/concourse-nodejs
    tag: 10

  github:
    uri:          (( concat "git@github.com:" meta.github.owner "/" meta.github.repo ))
    owner:        (( param "Please specify the name of the user / organization that owns the Github repository" ))
    repo:         (( param "Please specify the name of the Github repository" ))
    branch_master: master
    private_key:  (( param "Please generate an SSH Deployment Key for this repo and specify it here" ))
    access_token: (( param "Please generate a Personal Access Token to be used for creating github releases (do you have a ci-bot?)" ))

  cf:
    api:              https://api.run.pivotal.io
    skip_cert_check:  false
    username:         (( param "please provide cf.username" ))
    password:         (( param "please provide cf.password" ))
    organization:     (( param "please provide cf.organization" ))
    spaces:
      staging:        (( concat meta.name "-staging" ))
      production:     (( concat meta.name "-production" ))
    manifests:
      staging:        manifest.yml
      staging-debug:  manifest.noop.yml
      production:     manifest-production.yml

  slack:
    webhook:       (( param "Please specify your Slack Incoming Webhook Integration URL" ))
    success_moji:  ":airplane_departure:"
    fail_moji:     ":airplane_arriving:"
    upset_moji:    ":sad_panda:"
    channel:       "#snw-pws-apps"
    username:      starkandwayne-ci
    icon:          https://www.starkandwayne.com/assets/images/shield-blue-50x50.png
    fail_url: '(( concat "<" meta.url "/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME| Concourse Failure! " meta.slack.upset_moji ">" ))'
    success_url: '(( concat "<" meta.url "/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME| Concourse Success " meta.slack.success_moji ">" ))'

groups:
  - name: (( grab meta.pipeline ))
    jobs:
      - upgrade-ghost
      - deploy-staging
      - deploy-production

jobs:
  - name: upgrade-ghost
    public: true
    serial: true
    plan:
      - get: app
      - get: ghost
        trigger: true
      - put: notify
        params:
          channel:  (( grab meta.slack.channel ))
          username: (( grab meta.slack.username ))
          icon_url: (( grab meta.slack.icon ))
          text_file: ghost/body
      - task: upgrade-ghost
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: (( grab meta.image.name ))
              tag: (( grab meta.image.tag ))
          inputs:
          - name: app
          - name: ghost
          outputs: [{name: app-with-upgrade}]
          run:
            path: app/ci/scripts/upgrade-ghost.sh
      - put: app
        params:
          repository: app-with-upgrade
          rebase: true

  - name: deploy-staging
    public: false
    serial_groups: [staging]
    plan:
      - get: app
        trigger: true
      # - task: setup-app
      #   name: setup-app
      #   config:
      #     platform: linux
      #     image_resource:
      #       type: docker-image
      #       source:
      #         repository: (( grab meta.image.name ))
      #         tag: (( grab meta.image.tag ))
      #     inputs: [{name: app}]
      #     outputs: [{name: app-with-setup}]
      #     run:
      #       path: app/ci/scripts/setup-app.sh
      - put: cf-push-staging
        params:
          # manifest: (( concat "app-with-setup/" meta.cf.manifests.staging ))
          # path: app-with-setup
          # manifest: (( con-with-setup/" meta.cf.manifests.staging ))
          manifest: (( concat "app/" meta.cf.manifests.staging ))
          path: app
          show_app_log: true
    on_failure:
      put: notify
      params:
        channel:  (( grab meta.slack.channel ))
        username: (( grab meta.slack.username ))
        icon_url: (( grab meta.slack.icon ))
        text:    '(( concat meta.slack.fail_url " " meta.pipeline ": \"deploy-staging\" job failed" ))'
    on_success:
      put: notify
      params:
        channel:  (( grab meta.slack.channel ))
        username: (( grab meta.slack.username ))
        icon_url: (( grab meta.slack.icon ))
        text:    '(( concat meta.slack.success_url " " meta.pipeline ": \"deploy-staging\" successful" ))'

  - name: deploy-production
    public: false
    serial: true
    plan:
      - get: app
        trigger: false
        passed: [deploy-staging]
      # - task: setup-app
      #   name: setup-app
      #   config:
      #     platform: linux
      #     image_resource:
      #       type: docker-image
      #       source:
      #         repository: (( grab meta.image.name ))
      #         tag: (( grab meta.image.tag ))
      #     inputs: [{name: app}]
      #     outputs: [{name: app-with-setup}]
      #     run:
      #       path: app/ci/scripts/setup-app.sh
      - put: cf-push-production
        params:
          # manifest: (( concat "app-with-setup/" meta.cf.manifests.production ))
          # path: app-with-setup
          manifest: (( concat "app/" meta.cf.manifests.production ))
          path: app
          show_app_log: true
    on_failure:
      put: notify
      params:
        channel:  (( grab meta.slack.channel ))
        username: (( grab meta.slack.username ))
        icon_url: (( grab meta.slack.icon ))
        text:    '(( concat meta.slack.fail_url " " meta.pipeline ": \"deploy-production\" job failed" ))'
    on_success:
      put: notify
      params:
        channel:  (( grab meta.slack.channel ))
        username: (( grab meta.slack.username ))
        icon_url: (( grab meta.slack.icon ))
        text:    '(( concat meta.slack.success_url " " meta.pipeline ": \"deploy-production\" successful" ))'

resource_types:
  - name: slack-notification
    type: docker-image
    source:
      repository: cfcommunity/slack-notification-resource

resources:
  - name: app
    type: git
    source:
      uri:         (( grab meta.github.uri ))
      branch:      (( grab meta.github.branch_master ))
      private_key: (( grab meta.github.private_key ))

  - name: cf-push-staging
    type:  cf
    source:
      api:             (( grab meta.cf.api ))
      skip_cert_check: (( grab meta.cf.skip_cert_check ))
      username:        (( grab meta.cf.username ))
      password:        (( grab meta.cf.password ))
      organization:    (( grab meta.cf.organization ))
      space:           (( grab meta.cf.spaces.staging ))

  - name: cf-push-production
    type:  cf
    source:
      api:             (( grab meta.cf.api ))
      skip_cert_check: (( grab meta.cf.skip_cert_check ))
      username:        (( grab meta.cf.username ))
      password:        (( grab meta.cf.password ))
      organization:    (( grab meta.cf.organization ))
      space:           (( grab meta.cf.spaces.production ))

  - name: ghost
    type: github-release
    source:
      access_token: (( grab meta.github.access_token ))
      user: TryGhost
      repository: Ghost

  - name: notify
    type: slack-notification
    source:
      url: (( grab meta.slack.webhook ))